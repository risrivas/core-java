
## Overview
- role of annotations
- adding metadata with annotations
- commonly used annotations
- declaring custom annotations

## Annotations
- special types that act as metadata
- applied to a specific target
- no direct affect on target behaviour
- must be interpreted

## Applying annotations
- always preceded by @
- placed directly before the target
- allowable targets vary with annotation

## Annotations in code
- Core Java Platform:
- provides types for creating annotations
- has only a few annotations

@Override, @Deprecated, @SuppressWarnings

- Other tools/environments
XML and JSON processors
IntelliJ
Java EE
Spring and Hibernate


## Declaring custom annotations
- can declare custom annotations
- acts as custom metadata
- same capabilities as built-in annotations

- special kind of interface; types cannot explicitly implement
- declared with @interface keyword
- implicitly extend Annotation interface
- can be declared as a top-level type
- can be nested within a class or interface

- can optionally have elements
- declared as methods
- set similar to fields

- example
public @interface CommandKeyword {
    String name();
}

@CommandKeyword(name="add")
public class Adder implements MathProcessing {
    ...
    ...
}

- in the main program:

CommandKeyword keyWord = new Adder().getClass().getAnnotation(CommandKeyword.class);
String name = keyWord.name(); // "add"

- above will fail when run as its only available at compile time
- need to change its retention poilcy to runtime


###################################
# Annotation Access and Interaction
###################################
- accessed by reflection
- get class/member information - provides access to class-level/member annotations
- calls getAnnotation on target


## Retention policy
- Source: exist only in source file, discarded by compiler
- Class: compiled into class file, discarded by runtime
- Runtime: loaded into runtime, accessible with reflection

- example
@Retention(RetentionPolicy.RUNTIME)
public @interface CommandKeyword {
    String name();
}


## Annotation target
- applied to all - type, field, method, constructor, package, local variable, parameter
- better to filter and use only few - will generate compiler error if applied to incorrect target

- example
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE})
public @interface CommandKeyword {
    String name();
}

@Target({ElementType.TYPE}) => this will allow for any type, but if annotated before a method => compiler error
@Target({ElementType.TYPE, ElementType.METHOD}) => will allow method also

